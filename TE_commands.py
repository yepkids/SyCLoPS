print("\nThis is the SyCLoPS main program for executing TempestExtremes (TE) commands and run the Python classifier program.\n")
print("Please direct any questions to the author of this script: Yushan Han (yshhan@ucdavis.edu)\n")
import os
import subprocess

print("Please remember to review the code and comments in this file and modify accordingly before running.")

# Point to your TempestExtremes (TE) directory by specifying:
TEMPESTEXTREMESDIR = os.path.expanduser('~/tempestextremes/bin')

print("Please change the following arguments according to your requirements. The default is for ERA5 data at 3-hourly interval.")
#Define your time interval.
timefilter = "3hr"
#Define the merge distance for DetectNodes and the range distance for StitchNodes. Below is the recommendation for 3-hourly data.
MergeDist = 6.000001 #DetectNodes argument. We recommend adding 0.000001 to the distance to avoid floating point precision issues in some rare cases.
RangeDist = 4.000001 #StitchNodes argument. We recommend adding 0.000001 to the distance to avoid floating point precision issues in some rare cases.
MinTime = "18h" #StitchNodes argument
MaxGap = "12h" #StitchNodes argument
latname = 'latitude' #Name of the latitude variable in your dataset.
lonname = 'longitude' #Name of the longitude variable in your dataset.
print("If your time interval is different from the default 3-hour, please change the MergeDist and RangeDist variables accordingly.\n\
A range distance of 6.0 degree is recommended for 6-hourly data if you only focus on tropical systems.\n\
If you care about extratropical systems at 6-hourly interval, a range distance of 8.0 degree is recommended.")
print("\nNote: If your RangeDist is larger than MergeDist, the program will automatically use the 'prioritize' flag in StitchNodes.")

# Set this to True if you want to use parallel processing with srun when applicable.
use_srun = False  # Change to True if you want to use srun. Also see line 159 to verify if "srun" works on your machine.
srun_n = "256"    # Number of tasks (threads) for srun

# Create a log directory if it doesn't exist (for storing temporary logs of TempestExtremes). You may change the path and name of this log directory.
os.makedirs("./TE_log", exist_ok=True)

#If your dataset is not on a unstructured grid (i.e., not lon-lat grid), you should specify a connectivity file below and set use_connect to True.
use_connect = False 
connectivity_file = "connect_healpix_grid_zoom_8_example_filename.txt"

# Define your input and output file lists and filenames.
inputfile_DN = "ERA5_lpsnode_in.txt" #"This txt file should contain the list of existing input files that contains all the necessary variables for DetectNodes. \
# Please refer to "Manual/Required_Variables.png" for the list of required variables.")
outputfile_DN = "ERA5_lpsnode_out.txt" #This txt file should contain a list of output filenames that will be generated by DetectNodes and should have the same number of lines as the inputfiles.")
outputfile_SN = "ERA5_lps_tracks.csv" #This is the single output track file of StitchNodes.
inputfile_VP = "ERA5_sizeblob_in.txt" #This txt file should contain the list of U and V at 850 hPa and 925 hPa levels.")
outputfile_VP = "ERA5_cvort_out.txt" #This txt file should contain the list of output cyclonic vorticity filesnames that will be generated by VariableProcessor \
# and should have the same number of lines as the inputfiles.")
outputfile_DB = "ERA5_sizeblob_out.txt" #This txt file should contain the list of output filenames that will be generated by DetectBlobs and should have the same number of lines as the inputfiles.")
outputfile_BS = "ERA5_size_blob_stats.txt" #This is the single output file of BlobStats which contains the blob statistics.

# Mode choice by user
mode=input("Do you want to classify tropical-like cyclones (y/n)? Default is 'y'. If you only focus on tropical systems or typical extratropical systems, you may enter 'n' to save time.")
if mode == '':
    mode='Y'
if mode in ['Y', 'N', 'y', 'n']:
    print("You entered:",mode)
else:
    print("Invalid Entry. Please read the insturction and enter again.")

step=input("From which step do you want to start running? (1: DetectNodes (from beginning), 2: StitchNodes, 3: VariableProcessor, 4: DetectBlobs, 5: BlobStats, 6: Classifier). Default is 1.")
if step == '':
    step = '1'
if step not in ['1', '2', '3', '4', '5', '6']:
    print("Invalid step. Please enter a number between 1 and 6.")
else:
    print("You chose to start from step", step)
    step = int(step)

# Build the TempestExtremes commands. Feel free to modify the atmospheric variable names and levels.
print("Remember to change the variable names in the TE commands if necessary.")
detect_nodes_cmd = [
    f"{TEMPESTEXTREMESDIR}/DetectNodes",
    "--in_data_list", inputfile_DN,
    "--out_file_list", outputfile_DN, #If you only have one row in the input file list, you should use "--out" instead of "--out_file_list."
    "--searchbymin", "MSL",
    "--closedcontourcmd", "MSL,10,5.5,0",
    "--mergedist", str(MergeDist),
    "--outputcmd", #Output the following parameters for classification.
    "MSL,min,0;" #MSLP
    "MSL,posclosedcontour,2.0,0;" #MSLPCC20
    "MSL,posclosedcontour,5.5,0;" #MSLPCC55
    "_DIFF(_VECMAG(U(200hPa),V(200hPa)),_VECMAG(U(850hPa),V(850hPa))),avg,10.0;" #DEEPSHEAR
    "_DIFF(Z(300hPa),Z(500hPa)),negclosedcontour,6.5,1.0;" #UPPTKCC
    "_DIFF(Z(500hPa),Z(700hPa)),negclosedcontour,3.5,1.0;" #MIDTKCC
    "_DIFF(Z(700hPa),Z(925hPa)),negclosedcontour,3.5,1.0;" #LOWTKCC
    "Z(500hPa),posclosedcontour,3.5,1.0;" #Z500CC
    "VO(500hPa),avg,2.5;" #VO500AVG ##If VO (relative vorticity) is not directly available in your dataset, you can replace this line with "_CURL{8,2.5}(U(500hPa),V(500hPa)),min,0" \
    # for low-resolution data or "_CURL{16,2.5}(U(500hPa),V(500hPa)),min,0" for high-resolution data to calculate relative vorticity via TE.
    "R(100hPa),max,2.5;" #RH100MAX
    "R(850hPa),avg,2.5;" #RH850AVG
    "T(850hPa),max,0.0;" #T850
    "Z(850hPa),min,0;" #Z850 ##This parameter is not necessary if the dataset contains NaNs or missing values where 850 hPa level is below the surface.
    "ZS,min,0;" #ZS ##This parameter is not necessary if the dataset contains NaNs or missing values where 850 hPa level is below the surface, but we recommend keeping it for other useful information.
    "U(850hPa),posminusnegwtarea,5.5;" #U850DIFF
    "_VECMAG(U(200hPa),V(200hPa)),maxpoleward,1.0", #WS200PMX
    "--timefilter", timefilter,
    "--latname", latname,
    "--lonname", lonname,
    "--mergeequal",
    "--logdir", "./TE_log"
]

stitch_nodes_cmd = [
    f"{TEMPESTEXTREMESDIR}/StitchNodes",
    "--in_list", outputfile_DN, # If you only have one file from the output of DetectNodes, you should use "--in" instead of "--in_list."
    "--out", outputfile_SN,
    "--in_fmt", "lon,lat,MSLP,MSLPCC20,MSLPCC55,DEEPSHEAR,UPPTKCC,MIDTKCC,LOWTKCC,"
                "Z500CC,VO500AVG,RH100MAX,RH850AVG,T850,Z850,ZS,U850DIFF,WS200PMX",
    # Change the parameter (names) in this argument according to the outputcmd in DetectNodes if applicable.
    "--range", str(RangeDist),
    "--mintime", MinTime,
    "--maxgap", MaxGap,
    "--threshold", "MSLPCC55,>=,100.0,5",
    "--out_file_format", "csv"
]
if MergeDist > RangeDist:
     stitch_nodes_cmd.extend(["--prioritize", "MSLP"])

variable_processor_cmd = [
    "srun", "-n", "256",
    f"{TEMPESTEXTREMESDIR}/VariableProcessor",
    "--in_data_list", inputfile_VP, #If you only have one file for the input of VariableProcessor, you should use "--in_data" instead of "--in_data_list."
    "--out_data_list", outputfile_VP, #If you only have one file from the output of VariableProcessor, you should use "--out_data" instead of "--out_data_list."
    "--var", "_COND(_LAT(),_CURL{8,3}(U(850hPa),V(850hPa)),_PROD(_CURL{8,3}(U(850hPa),V(850hPa)),-1))",
    "--varout", "Cyclonic_Vorticity",
    "--latname", latname,
    "--lonname", lonname,
    "--logdir", "./TE_log",
    "--timefilter", timefilter,
    "--preserve", "U(925hPa),V(925hPa)" #Preserve the original U and V wind components at 925 hPa level for faster processing in the next step.
]

detect_blobs_cmd = [
    f"{TEMPESTEXTREMESDIR}/DetectBlobs",
    "--in_data_list", outputfile_VP, #If you only have one file from the output of VariableProcessor, you should use "--in_data" instead of "--in_data_list."
    "--out_list", outputfile_DB, #If you only have one file from the output of DetectBlobs, you should use "--out" instead of "--out_list".
    "--thresholdcmd", "((Cyclonic_Vorticity,>=,2e-5,0) & (_VECMAG(U(925hPa),V(925hPa)),>=,12.0,0)) | (Cyclonic_Vorticity,>=,4e-5,0)",
    "--geofiltercmd", "area,>=,1e4km2",
    "--tagvar", "blobid",
    "--latname", latname,
    "--lonname", lonname,
    "--timefilter", timefilter,
    "--logdir", "./TE_log"
]

blobstats_cmd = [
    f"{TEMPESTEXTREMESDIR}/BlobStats",
    "--in_list", outputfile_DB, #If you only have one file from the output of DetectBlobs, you should use "--in_file" instead of "--in_list."
    "--out_file", outputfile_BS,
    "--findblobs",
    "--var", "blobid",
    "--out", "centlon,centlat,minlat,maxlat,minlon,maxlon,area",
    "--latname", latname,
    "--lonname", lonname,
    #"--sumvar", "_PROD(_SUM(_POW(U(925hPa),2),_POW(V(925hPa),2)),0.5)", 
    # This is an optional argument to calculate IKE (Integrated Kinetic Energy) for each blob. Note this computation takes a long time with one thread. 
    # One may use GNU Parallel to split the output file and speed up the process (See the manual 2.2 for details).
    "--out_fulltime"
]

if use_srun:
    detect_nodes_cmd = ["srun", "-n", srun_n] + detect_nodes_cmd # It's possible that your machine use a different command for parallel processing, \
    # such as `mpirun` or `mpiexec`. Adjust accordingly.
    variable_processor_cmd = ["srun", "-n", srun_n] + variable_processor_cmd
    detect_blobs_cmd = ["srun", "-n", srun_n] + detect_blobs_cmd
    
if use_connect:
    detect_nodes_cmd.extend(["--in_connect", connectivity_file])
    stitch_nodes_cmd.extend(["--in_connect", connectivity_file])
    variable_processor_cmd.extend(["--in_connect", connectivity_file])
    detect_blobs_cmd.extend(["--in_connect", connectivity_file])
    blobstats_cmd.extend(["--in_connect", connectivity_file])
    
try:
    if step == 1:
        subprocess.run(detect_nodes_cmd, check=True)
        print("DetectNodes command executed successfully.")
    
    if step <= 2:
        subprocess.run(stitch_nodes_cmd, check=True)
        print("StitchNodes command executed successfully.")
    
    if mode.lower() == 'y' and step <= 5:
        print("You chose to classify tropical-like cyclones. The program will now run additional steps for calculating LPSAREA.")
        
        if step <= 3:
            subprocess.run(variable_processor_cmd, check=True)
            print("VariableProcessor command executed successfully.")
        
        if step <= 4:
            subprocess.run(detect_blobs_cmd, check=True)
            print("DetectBlobs command executed successfully.")
        
        if step <= 5:
            subprocess.run(blobstats_cmd, check=True)
            print("BlobStats command executed successfully.")
    elif mode.lower() != 'y' and step <= 5:
        print("You chose not to classify tropical-like cyclones. The program will skip the additional steps for calculating LPSAREA.")
except subprocess.CalledProcessError as e:
    print("Error running TE commands. Please refer to the error messages given by TempestExtremes for details:", e)
    
print("All TempestExtremes commands executed successfully. Now running SyCLoPS_classifier.py to classify LPSs.\n")

confirm=input("Please review the code and comments in SyCLoPS_classifier.py and modify accordingly before running. Are you ready to run SyCLoPS_classifier.py now? (y/n). \n\
    If not, you can always run it later by entering step '6' when prompted at the beginning of this program or just executing 'python SyCLoPS_classifier.py' in the terminal.")
if confirm.lower() != 'y':
    print("You chose not to run SyCLoPS_classifier.py now. You can run it later when you are ready.")
    exit()
    
try:
    subprocess.run(["python", "SyCLoPS_classifier.py"], check=True) 
    print("SyCLoPS_classifier.py executed successfully.")
except subprocess.CalledProcessError as e:
    print("Error running SyCLoPS_classifier.py:", e)